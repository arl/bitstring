package bitstring

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestSwapRange(t *testing.T) {
	tests := []struct {
		x, y          string
		start, length int
		wantx, wanty  string
	}{
		{
			x:     "1",
			y:     "0",
			start: 0, length: 1,
			wantx: "0",
			wanty: "1",
		},
		{
			x:     "1111111111111111111111111111111111111111111111111111111111111111",
			y:     "0000000000000000000000000000000000000000000000000000000000000000",
			start: 0, length: 32,
			wantx: "1111111111111111111111111111111100000000000000000000000000000000",
			wanty: "0000000000000000000000000000000011111111111111111111111111111111",
		},
		{
			x:     "1111111111111111111111111111111111111111",
			y:     "0000000000000000000000000000000000000000",
			start: 2, length: 30,
			wantx: "1111111100000000000000000000000000000011",
			wanty: "0000000011111111111111111111111111111100",
		},
		{
			x:     "1111111111",
			y:     "0000000000",
			start: 0, length: 3,
			wantx: "1111111000",
			wanty: "0000000111",
		},
		{
			x:     "111",
			y:     "000",
			start: 1, length: 2,
			wantx: "001",
			wanty: "110",
		},
		{
			x:     "111",
			y:     "000",
			start: 0, length: 3,
			wantx: "000",
			wanty: "111",
		},
		{
			x:     "11111111111111111111111111111111",
			y:     "00000000000000000000000000000000",
			start: 0, length: 32,
			wantx: "00000000000000000000000000000000",
			wanty: "11111111111111111111111111111111",
		},
		{
			x:     "111111111111111111111111111111111",
			y:     "000000000000000000000000000000000",
			start: 0, length: 33,
			wantx: "000000000000000000000000000000000",
			wanty: "111111111111111111111111111111111",
		},
		{
			x:     "111111111111111111111111111111111111111111111111111111111111111",
			y:     "000000000000000000000000000000000000000000000000000000000000000",
			start: 0, length: 63,
			wantx: "000000000000000000000000000000000000000000000000000000000000000",
			wanty: "111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x:     "1111111111111111111111111111111111111111111111111111111111111111",
			y:     "0000000000000000000000000000000000000000000000000000000000000000",
			start: 0, length: 64,
			wantx: "0000000000000000000000000000000000000000000000000000000000000000",
			wanty: "1111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x:     "11111111111111111111111111111111111111111111111111111111111111111",
			y:     "00000000000000000000000000000000000000000000000000000000000000000",
			start: 0, length: 65,
			wantx: "00000000000000000000000000000000000000000000000000000000000000000",
			wanty: "11111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x:     "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			y:     "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			start: 94, length: 1,
			wantx: "1101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			wanty: "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			x:     "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			y:     "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			start: 1, length: 256,
			wantx: "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
			wanty: "011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
		},
		{
			x:     "1111111111111111111111111111111111111111111111111111111111111111111",
			y:     "0000000000000000000000000000000000000000000000000000000000000000000",
			start: 64, length: 2,
			wantx: "1001111111111111111111111111111111111111111111111111111111111111111",
			wanty: "0110000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			x:     "1111111111111111111111111111111111111111111111111111111111111111111",
			y:     "0000000000000000000000000000000000000000000000000000000000000000000",
			start: 65, length: 1,
			wantx: "1011111111111111111111111111111111111111111111111111111111111111111",
			wanty: "0100000000000000000000000000000000000000000000000000000000000000000",
		},
	}
	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			x, err1 := NewFromString(tt.x)
			assert.NoError(t, err1)
			y, err2 := NewFromString(tt.y)
			assert.NoError(t, err2)
			SwapRange(x, y, tt.start, tt.length)

			wantx, err := NewFromString(tt.wantx)
			assert.NoError(t, err)
			wanty, err := NewFromString(tt.wanty)
			assert.NoError(t, err)

			equalbits(t, x, wantx)
			equalbits(t, y, wanty)
		})
	}
}

func TestSetRange(t *testing.T) {
	tests := []struct {
		x             string
		start, length int
		want          string
	}{
		{
			start: 0, length: 1,
			x:    "0",
			want: "1",
		},
		{
			start: 0, length: 1,
			x:    "1",
			want: "1",
		},
		{
			start: 0, length: 32,
			x:    "0000000000000000000000000000000000000000000000000000000000000000",
			want: "0000000000000000000000000000000011111111111111111111111111111111",
		},
		{
			start: 2, length: 30,
			x:    "0000000000000000000000000000000000000000",
			want: "0000000011111111111111111111111111111100",
		},
		{
			start: 0, length: 3,
			x:    "0000000000",
			want: "0000000111",
		},
		{
			start: 1, length: 2,
			x:    "000",
			want: "110",
		},
		{
			start: 0, length: 3,
			x:    "000",
			want: "111",
		},
		{
			start: 0, length: 63,
			x:    "000000000000000000000000000000000000000000000000000000000000000",
			want: "111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			start: 0, length: 64,
			x:    "0000000000000000000000000000000000000000000000000000000000000000",
			want: "1111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			start: 1, length: 64,
			x:    "000000000000000000000000000000000000000000000000000000000000000000",
			want: "011111111111111111111111111111111111111111111111111111111111111110",
		},
		{
			start: 94, length: 1,
			x:    "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			want: "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			start: 1, length: 256,
			x:    "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			want: "011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
		},
		{
			start: 64, length: 2,
			x:    "0000000000000000000000000000000000000000000000000000000000000000000",
			want: "0110000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			start: 65, length: 1,
			x:    "0000000000000000000000000000000000000000000000000000000000000000000",
			want: "0100000000000000000000000000000000000000000000000000000000000000000",
		},
	}
	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			x, err1 := NewFromString(tt.x)
			assert.NoError(t, err1)
			x.SetRange(tt.start, tt.length)

			want, err := NewFromString(tt.want)
			assert.NoError(t, err)

			equalbits(t, x, want)
		})
	}
}

func TestClearRange(t *testing.T) {
	tests := []struct {
		x             string
		start, length int
		want          string
	}{
		{
			start: 0, length: 1,
			x:    "1",
			want: "0",
		},
		{
			start: 0, length: 1,
			x:    "0",
			want: "0",
		},
		{
			start: 0, length: 32,
			x:    "1111111111111111111111111111111111111111111111111111111111111111",
			want: "1111111111111111111111111111111100000000000000000000000000000000",
		},
		{
			start: 2, length: 30,
			x:    "1111111111111111111111111111111111111111",
			want: "1111111100000000000000000000000000000011",
		},
		{
			start: 0, length: 3,
			x:    "1111111111",
			want: "1111111000",
		},
		{
			start: 1, length: 2,
			x:    "111",
			want: "001",
		},
		{
			start: 0, length: 3,
			x:    "111",
			want: "000",
		},
		{
			start: 0, length: 63,
			x:    "111111111111111111111111111111111111111111111111111111111111111",
			want: "000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			start: 0, length: 64,
			x:    "1111111111111111111111111111111111111111111111111111111111111111",
			want: "0000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			start: 1, length: 64,
			x:    "111111111111111111111111111111111111111111111111111111111111111111",
			want: "100000000000000000000000000000000000000000000000000000000000000001",
		},
		{
			start: 94, length: 1,
			x:    "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "1101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			start: 1, length: 256,
			x:    "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
		},
		{
			start: 64, length: 2,
			x:    "1111111111111111111111111111111111111111111111111111111111111111111",
			want: "1001111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			start: 65, length: 1,
			x:    "1111111111111111111111111111111111111111111111111111111111111111111",
			want: "1011111111111111111111111111111111111111111111111111111111111111111",
		},
	}
	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			x, err := NewFromString(tt.x)
			assert.NoError(t, err)
			x.ClearRange(tt.start, tt.length)

			want, err := NewFromString(tt.want)
			assert.NoError(t, err)

			equalbits(t, x, want)
		})
	}
}

func TestFlipRange(t *testing.T) {
	tests := []struct {
		x             string
		start, length int
		want          string
	}{
		{
			start: 0, length: 1,
			x:    "1",
			want: "0",
		},
		{
			start: 0, length: 1,
			x:    "0",
			want: "1",
		},
		{
			start: 0, length: 32,
			x:    "1111111111111111111111111111111100000000000000000000000000000000",
			want: "1111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			start: 2, length: 30,
			x:    "1111111100000000000000000000000000000011",
			want: "1111111111111111111111111111111111111111",
		},
		{
			start: 0, length: 3,
			x:    "1111111000",
			want: "1111111111",
		},
		{
			start: 1, length: 2,
			x:    "001",
			want: "111",
		},
		{
			start: 0, length: 3,
			x:    "111",
			want: "000",
		},
		{
			start: 0, length: 63,
			x:    "111111111111111111111111111111111111111111111111111111111111111",
			want: "000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			start: 0, length: 64,
			x:    "1111111111111111111111111111111111111111111111111111111111111111",
			want: "0000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			start: 1, length: 64,
			x:    "111111111111111111111111111111111111111111111111111111111111111111",
			want: "100000000000000000000000000000000000000000000000000000000000000001",
		},
		{
			start: 94, length: 1,
			x:    "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "1101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			start: 1, length: 256,
			x:    "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001",
		},
		{
			start: 64, length: 2,
			x:    "1111111111111111111111111111111111111111111111111111111111111111111",
			want: "1001111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			start: 65, length: 1,
			x:    "1111111111111111111111111111111111111111111111111111111111111111111",
			want: "1011111111111111111111111111111111111111111111111111111111111111111",
		},
	}
	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			x, err1 := NewFromString(tt.x)
			assert.NoError(t, err1)
			x.FlipRange(tt.start, tt.length)

			want, err := NewFromString(tt.want)
			assert.NoError(t, err)

			equalbits(t, x, want)
		})
	}
}
