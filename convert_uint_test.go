package bitstring

import (
	"math"
	"testing"
)

func TestSetUintn(t *testing.T) {
	tests := []struct {
		bs       string // starting bitstring
		x        uint64 // value to set
		nbits, i int
		want     string
	}{
		// LSB and MSB are both on the same word
		{
			nbits: 2, x: 2, i: 0,
			bs:   "000",
			want: "010",
		},
		{
			nbits: 2, x: 2, i: 1,
			bs:   "000",
			want: "100",
		},
		{
			nbits: 2, x: 2, i: 1,
			bs:   "1111",
			want: "1101",
		},
		{
			nbits: 1, x: 1, i: 19,
			bs:   "00000000000000000000000000000000",
			want: "00000000000010000000000000000000",
		},
		{
			nbits: 1, x: 3, i: 19,
			bs:   "00000000000000000000000000000000",
			want: "00000000000010000000000000000000",
		},
		{
			nbits: 4, x: 8, i: 19,
			bs:   "00000000011110000000000000000000",
			want: "00000000010000000000000000000000",
		},
		{
			nbits: 32, x: 0x80000002, i: 4,
			bs:   "0101010101010101010101010101010101010101",
			want: "0101100000000000000000000000000000100101",
		},
		// LSB and MSB are on separate words
		{
			nbits: 2, x: 3, i: 63,
			bs:   "0000000000000000000000000000000000000000000000000000000000000000000",
			want: "0011000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			nbits: 4, x: 9, i: 63,
			bs:   "00000000000000000000000000000000000000000000000000000000000000000000",
			want: "01001000000000000000000000000000000000000000000000000000000000000000",
		},
		{
			nbits: 64, x: 0x9cfbeb71ee3fcf5f, i: 35,
			bs:   "000000000000000000001101000011010011000001010011010101010101000100101000111101010100000000000000000000000000000000000",
			want: "000000000000000000100111001111101111101011011100011110111000111111110011110101111100000000000000000000000000000000000",
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			bs, _ := NewFromString(tt.bs)
			bs.SetUintn(tt.i, tt.nbits, tt.x)
			want, _ := NewFromString(tt.want)
			if !want.Equals(bs) {
				t.Errorf("Bitstring(%s).SetUintn(%d, %d, %d) got %s, want %s",
					tt.bs, tt.nbits, tt.i, tt.x, bs, want)
			}
		})
	}
}

func TestSetUint8(t *testing.T) {
	tests := []struct {
		bs   string // starting bitstring
		x    uint8  // value to set
		i    int    // bit index where to set it
		want string
	}{
		// LSB and MSB are both on the same word
		{
			x: 2, i: 0,
			bs:   "1111111111111111",
			want: "1111111100000010",
		},
		{
			x: 2, i: 8,
			bs:   "1111111111111111",
			want: "0000001011111111",
		},
		{
			x: 2, i: 16,
			bs:   "11111111111111111111111111111111",
			want: "11111111000000101111111111111111",
		},
		{
			x: 2, i: 24,
			bs:   "11111111111111111111111111111111",
			want: "00000010111111111111111111111111",
		},
		{
			x: 2, i: 22,
			bs:   "11111111111111111111111111111111",
			want: "11000000101111111111111111111111",
		},
		// LSB and MSB are on separate words
		{
			x: 2, i: 61,
			bs:   "111111111111111111111111111111111111111111111111111111111111111111111",
			want: "000000101111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x: 15, i: 63,
			bs:   "11111111111111111111111111111111111111111111111111111111111111111111111",
			want: "00001111111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x: math.MaxUint8, i: 59,
			bs:   "0000000000000000000000000000000000000000000000000000000000000000000",
			want: "1111111100000000000000000000000000000000000000000000000000000000000",
		},
		{
			x: 0xaa, i: 63,
			bs:   "0011101010101010101010101010101010101010101010101010101010101010101010101010101010",
			want: "0011101010110101010010101010101010101010101010101010101010101010101010101010101010",
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			bs, _ := NewFromString(tt.bs)
			bs.SetUint8(tt.i, tt.x)
			want, _ := NewFromString(tt.want)
			if !want.Equals(bs) {
				t.Errorf("Bitstring(%s).SetUint8(%d, %d) got %s, want %s",
					tt.bs, tt.i, tt.x, bs, want)
			}
		})
	}
}

func TestSetUint16(t *testing.T) {
	tests := []struct {
		bs   string // starting bitstring
		x    uint16 // value to set
		i    int    // bit index where to set it
		want string
	}{
		// LSB and MSB are both on the same word
		{
			x: 2, i: 0,
			bs:   "1111111111111111",
			want: "0000000000000010",
		},
		{
			x: 2, i: 8,
			bs:   "111111111111111111111111",
			want: "000000000000001011111111",
		},
		{
			x: 2, i: 16,
			bs:   "11111111111111111111111111111111",
			want: "00000000000000101111111111111111",
		},
		{
			x: 2, i: 24,
			bs:   "1111111111111111111111111111111111111111",
			want: "0000000000000010111111111111111111111111",
		},
		{
			x: 2, i: 22,
			bs:   "1111111111111111111111111111111111111111",
			want: "1100000000000000101111111111111111111111",
		},
		// LSB and MSB are on separate words
		{
			x: 2, i: 61,
			bs:   "11111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "00000000000000101111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x: 15, i: 63,
			bs:   "1111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "0000000000001111111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x: math.MaxUint16, i: 59,
			bs:   "000000000000000000000000000000000000000000000000000000000000000000000000000",
			want: "111111111111111100000000000000000000000000000000000000000000000000000000000",
		},
		{
			x: 0xaaaa, i: 63,
			bs:   "001110101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			want: "001110101011010101010101010010101010101010101010101010101010101010101010101010101010101010",
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			bs, _ := NewFromString(tt.bs)
			bs.SetUint16(tt.i, tt.x)
			want, _ := NewFromString(tt.want)
			if !want.Equals(bs) {
				t.Errorf("Bitstring(%s).SetUint16(%d, %d) got %s, want %s",
					tt.bs, tt.i, tt.x, bs, want)
			}
		})
	}
}

func TestSetUint32(t *testing.T) {
	tests := []struct {
		bs   string // starting bitstring
		x    uint32 // value to set
		i    int    // bit index where to set it
		want string
	}{
		// LSB and MSB are both on the same word
		{
			x: 2, i: 0,
			bs:   "11111111111111111111111111111111",
			want: "00000000000000000000000000000010",
		},
		{
			x: 2, i: 8,
			bs:   "1111111111111111111111111111111111111111",
			want: "0000000000000000000000000000001011111111",
		},
		{
			x: 2, i: 16,
			bs:   "111111111111111111111111111111111111111111111111",
			want: "000000000000000000000000000000101111111111111111",
		},
		{
			x: 2, i: 24,
			bs:   "11111111111111111111111111111111111111111111111111111111",
			want: "00000000000000000000000000000010111111111111111111111111",
		},
		{
			x: 2, i: 22,
			bs:   "11111111111111111111111111111111111111111111111111111111",
			want: "11000000000000000000000000000000101111111111111111111111",
		},
		// LSB and MSB are on separate words
		{
			x: 2, i: 61,
			bs:   "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "000000000000000000000000000000101111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x: 15, i: 63,
			bs:   "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "00000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x: math.MaxUint32, i: 59,
			bs:   "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			want: "1111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000",
		},
		{
			x: 0xaaaaaaaa, i: 63,
			bs:   "0011101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			want: "0011101010110101010101010101010101010101010010101010101010101010101010101010101010101010101010101010101010",
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			bs, _ := NewFromString(tt.bs)
			bs.SetUint32(tt.i, tt.x)
			want, _ := NewFromString(tt.want)
			if !want.Equals(bs) {
				t.Errorf("Bitstring(%s).SetUint32(%d, %d) got %s, want %s",
					tt.bs, tt.i, tt.x, bs, want)
			}
		})
	}
}

func TestSetUint64(t *testing.T) {
	tests := []struct {
		bs   string // starting bitstring
		x    uint64 // value to set
		i    int    // bit index where to set it
		want string
	}{
		// LSB and MSB are both on the same word
		{
			x: 2, i: 0,
			bs:   "1111111111111111111111111111111111111111111111111111111111111111",
			want: "0000000000000000000000000000000000000000000000000000000000000010",
		},
		// LSB and MSB are on separate words
		{
			x: 2, i: 8,
			bs:   "111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "000000000000000000000000000000000000000000000000000000000000001011111111",
		},
		{
			x: 2, i: 16,
			bs:   "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "00000000000000000000000000000000000000000000000000000000000000101111111111111111",
		},
		{
			x: 2, i: 24,
			bs:   "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "0000000000000000000000000000000000000000000000000000000000000010111111111111111111111111",
		},
		{
			x: 2, i: 22,
			bs:   "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "1100000000000000000000000000000000000000000000000000000000000000101111111111111111111111",
		},
		{
			x: 2, i: 61,
			bs:   "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "00000000000000000000000000000000000000000000000000000000000000101111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x: 15, i: 63,
			bs:   "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			want: "0000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111",
		},
		{
			x: math.MaxUint64, i: 59,
			bs:   "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			want: "111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000",
		},
		{
			x: 0xaaaaaaaaaaaaaaaa, i: 63,
			bs:   "001110101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
			want: "001110101011010101010101010101010101010101010101010101010101010101010101010010101010101010101010101010101010101010101010101010101010101010",
		},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			bs, _ := NewFromString(tt.bs)
			bs.SetUint64(tt.i, tt.x)
			want, _ := NewFromString(tt.want)
			if !want.Equals(bs) {
				t.Errorf("Bitstring(%s).SetUint64(%d, %d) got %s, want %s",
					tt.bs, tt.i, tt.x, bs, want)
			}
		})
	}
}
